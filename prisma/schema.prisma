generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Category {
  FICTION
  NON_FICTION
  CHILDREN
  COMICS
  POETRY
  EDUCATIONAL
  REFERENCE
  RELIGION
  SCIENCE
  HISTORY
  ART
  HEALTH
  BUSINESS
}

model Avatar {
  id        String @id @default(cuid())
  url       String @default("https://placehold.co/600x400")
  localPath String @default("")
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                          String   @id @default(cuid())
  username                    String   @default("johndoe007")
  fullName                    String   @default("John Doe")
  email                       String
  password                    String
  isEmailVerified             Boolean  @default(false)
  role                        Role     @default(USER)
  emailVerificationToken      String?
  resendEmailVerificationUrl  String?
  forgetVerificationToken     String?
  resendForgetVerificationUrl String?
  refreshToken                String?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  avatar                      Avatar?
  book                        Book[]
}

model BookCoverImageUrl {
  id     String @id @default(cuid())
  url    String @default("")
  bookId String @unique
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Book {
  id                   String             @id @default(cuid())
  userId               String
  book_title           String             @unique
  book_description     String
  book_price           Decimal            @db.Decimal(10, 2)
  book_publish_date    DateTime
  book_language        String
  book_publisher       String?
  book_pages           String?
  book_rating          Float?             @default(0)
  book_category        Category
  book_author_name     String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  book_cover_image_url BookCoverImageUrl?
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}
